{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/main.js","scripts/priority-nav-scroller.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import PriorityNavScroller from './priority-nav-scroller.js';\n\n// // Init with default setup\n// const priorityNavScrollerDefault = PriorityNavScroller();\n\n// // Init with all options at default setting\n// const priorityNavScrollerDefault = PriorityNavScroller({\n//   selector: '.nav-scroller',\n//   navSelector: '.nav-scroller-nav',\n//   contentSelector: '.nav-scroller-content',\n//   itemSelector: '.nav-scroller-item',\n//   buttonLeftSelector: '.nav-scroller-btn--left',\n//   buttonRightSelector: '.nav-scroller-btn--right',\n//   scrollStep: 75\n// });\n\n// Init multiple nav scrollers with the same options\nlet navScrollers = document.querySelectorAll('.nav-scroller');\n\nnavScrollers.forEach((currentValue, currentIndex) => {\n  PriorityNavScroller({\n    selector: currentValue\n  });\n});\n","/**\n * Priority+ horizontal scrolling menu.\n * @param {Object} object - Container for all options.\n * @param {string || DOM node} selector - Element selector.\n * @param {string} navSelector - Nav element selector.\n * @param {string} contentSelector - Content element selector.\n * @param {string} itemSelector - Items selector.\n * @param {string} buttonLeftSelector - Left button selector.\n * @param {string} buttonRightSelector - Right button selector.\n * @param {integer || string} scrollStep - Amount to scroll on button click.\n */\n\nconst PriorityNavScroller = function({\n    selector: selector = '.nav-scroller',\n    navSelector: navSelector = '.nav-scroller-nav',\n    contentSelector: contentSelector = '.nav-scroller-content',\n    itemSelector: itemSelector = '.nav-scroller-item',\n    buttonLeftSelector: buttonLeftSelector = '.nav-scroller-btn--left',\n    buttonRightSelector: buttonRightSelector = '.nav-scroller-btn--right',\n    scrollStep: scrollStep = 75\n  } = {}) {\n\n  const navScroller = typeof selector === 'string' ? document.querySelector(selector) : selector;\n\n  const validateScrollStep = function() {\n    return Number.isInteger(scrollStep) || scrollStep === 'average';\n  }\n\n  if (navScroller === undefined || navScroller === null || !validateScrollStep()) {\n    throw new Error('There is something wrong with your selector.');\n    return;\n  }\n\n  const navScrollerNav = navScroller.querySelector(navSelector);\n  const navScrollerContent = navScroller.querySelector(contentSelector);\n  const navScrollerContentItems = navScrollerContent.querySelectorAll(itemSelector);\n  const navScrollerLeft = navScroller.querySelector(buttonLeftSelector);\n  const navScrollerRight = navScroller.querySelector(buttonRightSelector);\n\n  let scrolling = false;\n  let scrollAvailableLeft = 0;\n  let scrollAvailableRight = 0;\n  let scrollingDirection = '';\n  let scrollOverflow = '';\n  let timeout;\n\n\n  /** Sets overflow and toggle buttons accordingly */\n  const setOverflow = function() {\n    scrollOverflow = getOverflow();\n    toggleButtons(scrollOverflow);\n    calculateScrollStep();\n  }\n\n\n  /** Debounce setting the overflow with requestAnimationFrame */\n  const requestSetOverflow = function() {\n    if (timeout) window.cancelAnimationFrame(timeout);\n\n    timeout = window.requestAnimationFrame(() => {\n      setOverflow();\n    });\n  }\n\n\n  /**\n   * Gets the overflow on the nav scroller\n   * @return {string} Left, right, both or none\n   */\n  const getOverflow = function() {\n    let scrollWidth = navScrollerNav.scrollWidth;\n    let scrollViewport = navScrollerNav.clientWidth;\n    let scrollLeft = navScrollerNav.scrollLeft;\n\n    scrollAvailableLeft = scrollLeft;\n    scrollAvailableRight = scrollWidth - (scrollViewport + scrollLeft);\n\n    // 1 instead of 0 to compensate for rounding errors from the browser\n    let scrollLeftCondition = scrollAvailableLeft > 1;\n    let scrollRightCondition = scrollAvailableRight > 1;\n\n    // console.log(scrollWidth, scrollViewport, scrollAvailableLeft, scrollAvailableRight);\n\n    if (scrollLeftCondition && scrollRightCondition) {\n      return 'both';\n    }\n    else if (scrollLeftCondition) {\n      return 'left';\n    }\n    else if (scrollRightCondition) {\n      return 'right';\n    }\n    else {\n      return 'none';\n    }\n\n  }\n\n\n  /** Calculates the scroll step based on the width of the scroller and the number of links */\n  const calculateScrollStep = function() {\n    if (scrollStep === 'average') {\n      let scrollViewportNoPadding = navScrollerNav.scrollWidth - (parseInt(getComputedStyle(navScrollerContent,null).getPropertyValue('padding-left'), 10) + parseInt(getComputedStyle(navScrollerContent,null).getPropertyValue('padding-right'), 10));\n\n      let scrollStepAverage = Math.floor(scrollViewportNoPadding / navScrollerContentItems.length);\n\n      scrollStep = scrollStepAverage;\n    }\n  }\n\n\n  /** Move the scroller with a transform */\n  const moveScroller = function(direction) {\n\n    if (scrolling === true || (scrollOverflow !== direction && scrollOverflow !== 'both')) return;\n\n    let scrollDistance = scrollStep;\n    let scrollAvailable = direction === 'left' ? scrollAvailableLeft : scrollAvailableRight;\n\n    // If there is less that 1.75 steps available then scroll the full way\n    if (scrollAvailable < (scrollStep * 1.75)) {\n      scrollDistance = scrollAvailable;\n    }\n\n    if (direction === 'right') {\n      scrollDistance *= -1;\n    }\n\n    navScrollerContent.classList.remove('no-transition');\n    navScrollerContent.style.transform = 'translateX(' + scrollDistance + 'px)';\n\n    scrollingDirection = direction;\n    scrolling = true;\n  }\n\n\n  /** Set the scroller position and removes transform, called after moveScroller() */\n  const setScrollerPosition = function() {\n    var style = window.getComputedStyle(navScrollerContent, null);\n    var transform = style.getPropertyValue('transform');\n    var transformValue = Math.abs(parseInt(transform.split(',')[4]) || 0);\n\n    if (scrollingDirection === 'left') {\n      transformValue *= -1;\n    }\n\n    navScrollerContent.classList.add('no-transition');\n    navScrollerContent.style.transform = '';\n    navScrollerNav.scrollLeft = navScrollerNav.scrollLeft + transformValue;\n    navScrollerContent.classList.remove('no-transition');\n\n    scrolling = false;\n  }\n\n\n  /** Toggle buttons depending on overflow */\n  const toggleButtons = function(overflow) {\n    if (overflow === 'both' || overflow === 'left') {\n      navScrollerLeft.classList.add('active');\n    }\n    else {\n      navScrollerLeft.classList.remove('active');\n    }\n\n    if (overflow === 'both' || overflow === 'right') {\n      navScrollerRight.classList.add('active');\n    }\n    else {\n      navScrollerRight.classList.remove('active');\n    }\n  }\n\n\n  /** Init plugin */\n  const init = function() {\n    setOverflow();\n\n    window.addEventListener('resize', () => {\n      requestSetOverflow();\n    });\n\n    navScrollerNav.addEventListener('scroll', () => {\n      requestSetOverflow();\n    });\n\n    navScrollerContent.addEventListener('transitionend', () => {\n      setScrollerPosition();\n    });\n\n    navScrollerLeft.addEventListener('click', () => {\n      moveScroller('left');\n    });\n\n    navScrollerRight.addEventListener('click', () => {\n      moveScroller('right');\n    });\n  };\n\n\n  // Init is called by default\n  init();\n\n\n  // Reveal API\n  return {\n    init\n  };\n\n};\n\nexport default PriorityNavScroller;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}